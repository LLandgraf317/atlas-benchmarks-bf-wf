--- /dev/null	2016-06-29 09:45:09.344069033 +0200
+++ parsec/config/clang-serial.bldconf	2016-06-29 18:02:47.567849201 +0200
@@ -0,0 +1,11 @@
+#!/bin/bash
+
+# clang-serial.bldconf - configuration file for PARSEC
+
+source ${PARSECDIR}/config/gcc-serial.bldconf
+
+CC=clang
+CXX=clang++
+CPPFLAGS="-D_GNU_SOURCE ${CPPFLAGS}"
+CXXFLAGS="${CXXFLAGS} -std=c++14"
+LDFLAGS="${LDFLAGS} -pthread -lm -latlas-runtime"
--- /dev/null	2012-10-28 12:33:01.331261529 +0100
+++ parsec/pkgs/apps/bodytrack/parsec/clang-serial.bldconf	2012-10-27 16:38:46.000000000 +0200
@@ -0,0 +1,3 @@
+#!/bin/bash
+
+source ${PARSECDIR}/pkgs/apps/bodytrack/parsec/gcc-serial.bldconf
--- parsec/pkgs/apps/bodytrack/parsec/native.runconf	2012-10-28 13:37:53.000000000 +0100
+++ parsec/pkgs/apps/bodytrack/parsec/native.runconf	2013-06-11 14:04:22.000000000 +0200
@@ -16,5 +16,5 @@
 run_exec="bin/bodytrack"
 
 # Arguments to use
-run_args="sequenceB_261 4 261 4000 5 0 ${NTHREADS}"
+run_args="sequenceB_261 4 261 750 3 0 1 0"
 
--- parsec/pkgs/apps/bodytrack/src/TrackingBenchmark/main.cpp	2013-07-28 16:39:44.000000000 +0200
+++ parsec/pkgs/apps/bodytrack/src/TrackingBenchmark/main.cpp	2016-06-29 18:49:12.775875535 +0200
@@ -65,6 +65,11 @@
 #include "TrackingModel.h"
 #include "system.h"
 
+#include <functional>
+#include <chrono>
+#include <mutex>
+#include <condition_variable>
+#include <atlas/dispatch.h>
 
 using namespace std;
 
@@ -347,16 +352,40 @@
 #if defined(ENABLE_PARSEC_HOOKS)
         __parsec_roi_begin();
 #endif
-	for(int i = 0; i < frames; i++)														//process each set of frames
+	atlas::dispatch_queue queue("bodytrack",{1,2,3,4});
+	auto deadline = std::chrono::steady_clock::now();
+	std::function<void()> job;
+	std::condition_variable done;
+	std::mutex mutex;
+	int i = 0;
+
+	auto iteration = [&]
 	{	cout << "Processing frame " << i << endl;
 		if(!pf.Update((float)i))														//Run particle filter step
 		{	cout << "Error loading observation data" << endl;
-			return 0;
+			done.notify_one();
+			return;
 		}		
 		pf.Estimate(estimate);															//get average pose of the particle distribution
 		WritePose(outputFileAvg, estimate);
 		if(OutputBMP)
 			pf.Model().OutputBMP(estimate, i);											//save output bitmap file
+
+		{	std::unique_lock<std::mutex> lock(mutex);
+			i++;
+			if (i < frames)
+			{	deadline += 250ms; //initially 250ms
+				queue.dispatch_async_atlas(deadline, nullptr, 0, [&] { job(); });
+			}
+			else
+			{	done.notify_one();
+			}
+		}
+	};
+	job = iteration;
+	queue.dispatch_async_atlas(deadline, nullptr, 0, [&] { job(); });
+	{	std::unique_lock<std::mutex> lock(mutex);
+		done.wait(lock, [&i, frames] { return i == frames; });
 	}
 #if defined(ENABLE_PARSEC_HOOKS)
         __parsec_roi_end();
@@ -374,7 +403,7 @@
 #ifdef PARSEC_VERSION
 #define __PARSEC_STRING(x) #x
 #define __PARSEC_XSTRING(x) __PARSEC_STRING(x)
-        cout << "PARSEC Benchmark Suite Version "__PARSEC_XSTRING(PARSEC_VERSION) << endl << flush;
+        cout << "PARSEC Benchmark Suite Version " __PARSEC_XSTRING(PARSEC_VERSION) << endl << flush;
 #else
         cout << "PARSEC Benchmark Suite" << endl << flush;
 #endif //PARSEC_VERSION
